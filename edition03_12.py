# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo7.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys, cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from ClassSer import *
from sinwave import *
import time
from pyqtgraph import PlotWidget
import numpy as np
import pyqtgraph as pq
import threading
import datetime
from Camera_Thread import Camera_Thread
from Image_process import FindTarget

class Ui_MainWindow(QtWidgets.QWidget):
    def __init__(self):

        super().__init__()
        self.timer = QtCore.QTimer()
        self.timer2 = QtCore.QTimer()
        self.timer_plot = QtCore.QTimer()
        self.timer_read = QtCore.QTimer()
        self.timer_send = QtCore.QTimer()
        self.setupUi(MainWindow)
        self.button_connect()

        ## camera
        self.Camera=Camera_Thread()
        self.flag = 0
        self.img = []

        ## motor
        self.motor1 = "COM0"
        self.motor2 = "COM1"
        self.motor3 = "COM2"
        self.step_motor1 = 0.1
        self.step_motor2 = 0.1
        self.step_motor3 = 0.1
        self.flag_motor1 = 0
        self.flag_motor2 = 0
        self.flag_motor3 = 0
        self.motor1_position = np.array([0])
        self.motor2_position = np.array([0])
        self.motor3_position = np.array([0])
        self.motor1_plot = np.array([0])
        self.motor2_plot = np.array([0])
        self.motor3_plot = np.array([0])
        self.img_x_plot = np.array([0])
        self.img_y_plot = np.array([0])
        self.ser_motor1 = serial_port()
        self.ser_motor2 = serial_port()
        self.ser_motor3 = serial_port()

        ## 波特率
        self.comboBoxs = {'motor1': self.comboBox, 'motor2': self.comboBox_2, 'motor3': self.comboBox_3}
        for key, item in self.comboBoxs.items():
            item.id = key
            item.addItems(['9600', '19200', '38400', '57600', '115200'])
            item.currentIndexChanged[str].connect(self.select_rate)
        #sin 函数
        self.lineEdit_sin={'A':self.lineEdit_A,'F':self.lineEdit_F,'D':self.lineEdit_D,'DB':self.lineEdit_B}
        for key ,item in self.lineEdit_sin.items():
            item.id =key
            item.editingFinished.connect(self.sin_get)
        ## light
        self.light = 0

        ## plot
        ## 样式
        self.graphicsView_motor1.setBackground('w')
        self.graphicsView_motor2.setBackground('w')
        self.graphicsView_motor3.setBackground('w')
        self.graphicsView_F.setBackground('w')
        self.graphicsView_x.setBackground('w')
        self.graphicsView_y.setBackground('w')
        self.flag_plot = 0

        self.f =[]
        self.save_data = open("D:/PY_Project/python_2022_8_3/test_save.txt", "w")
        self.count = 0




        # sin
        self.sin_A = 0.3
        self.sin_F = 1
        self.sin_D = 0
        self.sin_B = 0
        pass

    def button_connect(self):
        self.spinBox_Camera_select.valueChanged['QString'].connect(self.ReadCamera)
        self.pushButton_camera.clicked.connect(self.OpenCamera)
        self.timer.timeout.connect(self.show_viedo)
        self.timer2.timeout.connect(self.show_viedo)

        self.spinBox_Motor1_select.valueChanged['QString'].connect(self.Read_Motor1)
        self.spinBox_Motor2_select.valueChanged['QString'].connect(self.Read_Motor2)
        self.spinBox_Motor3_select.valueChanged['QString'].connect(self.Read_Motor3)
        self.checkBox_Motor1.stateChanged.connect(self.EnableMotor1)
        self.checkBox_Motor2.stateChanged.connect(self.EnableMotor2)
        self.checkBox_Motor3.stateChanged.connect(self.EnableMotor3)
        self.checkBox_Light.stateChanged.connect(self.EnableLight)
        self.verticalSlider_Light.valueChanged.connect(self.LightChange)

        # motor move
        self.lineEdit_Motor1.editingFinished.connect(self.ReadText_motor1)
        self.lineEdit_Motor2.editingFinished.connect(self.ReadText_motor2)
        self.lineEdit_Motor3.editingFinished.connect(self.ReadText_motor3)
        # add/reduce
        self.pushButton_Motor1_Add.clicked.connect(self.motor1_PR)
        self.pushButton_Motor1_Reduce.clicked.connect(self.motor1_PR_reverse)
        self.pushButton_Motor2_Add.clicked.connect(self.motor2_PR)
        self.pushButton_Motor2_Reduce.clicked.connect(self.motor2_PR_reverse)
        self.timer_read.timeout.connect(self.position_requset)

        ## plot enable
        self.pushButton_Enable.clicked.connect(self.plot_enable)
        self.timer_plot.timeout.connect(self.update_data)
        # sin 函数
        self.checkBox_sin.stateChanged.connect(self.SinDataSend)
        self.checkBox_Adaptive.stateChanged.connect(self.SinRun)
        self.checkBox_Sine_F.stateChanged.connect(self.UserDefine)
        self.wave=[]
        self.wave_len=0


        # send
        self.timer_send.timeout.connect(self.sindata)
        pass

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout_7 = QtWidgets.QGridLayout()
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.graphicsView_y = PlotWidget(self.frame_2)
        self.graphicsView_y.setObjectName("graphicsView_y")
        self.gridLayout_7.addWidget(self.graphicsView_y, 3, 0, 3, 1)
        self.graphicsView_motor2 = PlotWidget(self.frame_2)
        self.graphicsView_motor2.setObjectName("graphicsView_motor2")
        self.gridLayout_7.addWidget(self.graphicsView_motor2, 2, 1, 2, 1)
        self.graphicsView_motor3 = PlotWidget(self.frame_2)
        self.graphicsView_motor3.setObjectName("graphicsView_motor3")
        self.gridLayout_7.addWidget(self.graphicsView_motor3, 4, 1, 2, 1)
        self.graphicsView_motor1 = PlotWidget(self.frame_2)
        self.graphicsView_motor1.setObjectName("graphicsView_motor1")
        self.gridLayout_7.addWidget(self.graphicsView_motor1, 0, 1, 2, 1)
        self.graphicsView_F = PlotWidget(self.frame_2)
        self.graphicsView_F.setObjectName("graphicsView_F")
        self.gridLayout_7.addWidget(self.graphicsView_F, 0, 2, 6, 1)
        self.graphicsView_x = PlotWidget(self.frame_2)
        self.graphicsView_x.setObjectName("graphicsView_x")
        self.gridLayout_7.addWidget(self.graphicsView_x, 0, 0, 3, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_7)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.frame_3 = QtWidgets.QFrame(self.frame_2)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Widget_Panel = QtWidgets.QTabWidget(self.frame_3)
        self.Widget_Panel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Widget_Panel.setStyleSheet("background-color: rgb(198, 198, 198);")
        self.Widget_Panel.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.Widget_Panel.setObjectName("Widget_Panel")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.tab_7)
        self.gridLayout_10.setObjectName("gridLayout_10")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_10.addItem(spacerItem, 0, 1, 1, 1)
        self.pushButton_Home = QtWidgets.QPushButton(self.tab_7)
        self.pushButton_Home.setObjectName("pushButton_Home")
        self.gridLayout_10.addWidget(self.pushButton_Home, 1, 0, 1, 1)
        self.pushButton_Enable = QtWidgets.QPushButton(self.tab_7)
        self.pushButton_Enable.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.pushButton_Enable.setObjectName("pushButton_Enable")
        self.gridLayout_10.addWidget(self.pushButton_Enable, 0, 0, 1, 1)
        self.gridLayout_10.setRowStretch(0, 1)
        self.Widget_Panel.addTab(self.tab_7, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.Widget_Panel.addTab(self.tab_8, "")
        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setObjectName("tab_9")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.tab_9)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_Joint_Motor3 = QtWidgets.QLabel(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_Joint_Motor3.sizePolicy().hasHeightForWidth())
        self.label_Joint_Motor3.setSizePolicy(sizePolicy)
        self.label_Joint_Motor3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Joint_Motor3.setLineWidth(2)
        self.label_Joint_Motor3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Joint_Motor3.setObjectName("label_Joint_Motor3")
        self.gridLayout_8.addWidget(self.label_Joint_Motor3, 2, 0, 1, 1)
        self.lineEdit_Motor1 = QtWidgets.QLineEdit(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_Motor1.sizePolicy().hasHeightForWidth())
        self.lineEdit_Motor1.setSizePolicy(sizePolicy)
        self.lineEdit_Motor1.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_Motor1.setObjectName("lineEdit_Motor1")
        self.gridLayout_8.addWidget(self.lineEdit_Motor1, 0, 1, 1, 1)
        self.label_Joint_Motor2 = QtWidgets.QLabel(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_Joint_Motor2.sizePolicy().hasHeightForWidth())
        self.label_Joint_Motor2.setSizePolicy(sizePolicy)
        self.label_Joint_Motor2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Joint_Motor2.setLineWidth(2)
        self.label_Joint_Motor2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Joint_Motor2.setObjectName("label_Joint_Motor2")
        self.gridLayout_8.addWidget(self.label_Joint_Motor2, 1, 0, 1, 1)
        self.pushButton_Motor3_Add = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Motor3_Add.sizePolicy().hasHeightForWidth())
        self.pushButton_Motor3_Add.setSizePolicy(sizePolicy)
        self.pushButton_Motor3_Add.setObjectName("pushButton_Motor3_Add")
        self.gridLayout_8.addWidget(self.pushButton_Motor3_Add, 2, 2, 1, 1)
        self.lineEdit_Motor3 = QtWidgets.QLineEdit(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_Motor3.sizePolicy().hasHeightForWidth())
        self.lineEdit_Motor3.setSizePolicy(sizePolicy)
        self.lineEdit_Motor3.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_Motor3.setObjectName("lineEdit_Motor3")
        self.gridLayout_8.addWidget(self.lineEdit_Motor3, 2, 1, 1, 1)
        self.label_Joint_Motor1 = QtWidgets.QLabel(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_Joint_Motor1.sizePolicy().hasHeightForWidth())
        self.label_Joint_Motor1.setSizePolicy(sizePolicy)
        self.label_Joint_Motor1.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Joint_Motor1.setLineWidth(2)
        self.label_Joint_Motor1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Joint_Motor1.setObjectName("label_Joint_Motor1")
        self.gridLayout_8.addWidget(self.label_Joint_Motor1, 0, 0, 1, 1)
        self.lineEdit_Motor2 = QtWidgets.QLineEdit(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_Motor2.sizePolicy().hasHeightForWidth())
        self.lineEdit_Motor2.setSizePolicy(sizePolicy)
        self.lineEdit_Motor2.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_Motor2.setObjectName("lineEdit_Motor2")
        self.gridLayout_8.addWidget(self.lineEdit_Motor2, 1, 1, 1, 1)
        self.pushButton_Motor1_Add = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Motor1_Add.sizePolicy().hasHeightForWidth())
        self.pushButton_Motor1_Add.setSizePolicy(sizePolicy)
        self.pushButton_Motor1_Add.setObjectName("pushButton_Motor1_Add")
        self.gridLayout_8.addWidget(self.pushButton_Motor1_Add, 0, 2, 1, 1)
        self.pushButton_Motor2_Add = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Motor2_Add.sizePolicy().hasHeightForWidth())
        self.pushButton_Motor2_Add.setSizePolicy(sizePolicy)
        self.pushButton_Motor2_Add.setObjectName("pushButton_Motor2_Add")
        self.gridLayout_8.addWidget(self.pushButton_Motor2_Add, 1, 2, 1, 1)
        self.pushButton_Motor1_Reduce = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Motor1_Reduce.sizePolicy().hasHeightForWidth())
        self.pushButton_Motor1_Reduce.setSizePolicy(sizePolicy)
        self.pushButton_Motor1_Reduce.setObjectName("pushButton_Motor1_Reduce")
        self.gridLayout_8.addWidget(self.pushButton_Motor1_Reduce, 0, 3, 1, 1)
        self.pushButton_Motor2_Reduce = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Motor2_Reduce.sizePolicy().hasHeightForWidth())
        self.pushButton_Motor2_Reduce.setSizePolicy(sizePolicy)
        self.pushButton_Motor2_Reduce.setObjectName("pushButton_Motor2_Reduce")
        self.gridLayout_8.addWidget(self.pushButton_Motor2_Reduce, 1, 3, 1, 1)
        self.pushButton_Motor3_Reduce = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Motor3_Reduce.sizePolicy().hasHeightForWidth())
        self.pushButton_Motor3_Reduce.setSizePolicy(sizePolicy)
        self.pushButton_Motor3_Reduce.setObjectName("pushButton_Motor3_Reduce")
        self.gridLayout_8.addWidget(self.pushButton_Motor3_Reduce, 2, 3, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(200, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem1, 1, 4, 1, 1)
        self.Widget_Panel.addTab(self.tab_9, "")
        self.tab_10 = QtWidgets.QWidget()
        self.tab_10.setObjectName("tab_10")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.tab_10)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.lineEdit_AF = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_AF.sizePolicy().hasHeightForWidth())
        self.lineEdit_AF.setSizePolicy(sizePolicy)
        self.lineEdit_AF.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_AF.setObjectName("lineEdit_AF")
        self.gridLayout_9.addWidget(self.lineEdit_AF, 8, 4, 1, 1)
        self.label_30 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_30.sizePolicy().hasHeightForWidth())
        self.label_30.setSizePolicy(sizePolicy)
        self.label_30.setFrameShape(QtWidgets.QFrame.Box)
        self.label_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_30.setObjectName("label_30")
        self.gridLayout_9.addWidget(self.label_30, 6, 4, 1, 1)
        self.label_user = QtWidgets.QLabel(self.tab_10)
        self.label_user.setFrameShape(QtWidgets.QFrame.Box)
        self.label_user.setObjectName("label_user")
        self.gridLayout_9.addWidget(self.label_user, 8, 1, 1, 1)
        self.lineEdit_user = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_user.sizePolicy().hasHeightForWidth())
        self.lineEdit_user.setSizePolicy(sizePolicy)
        self.lineEdit_user.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_user.setObjectName("lineEdit_user")
        self.gridLayout_9.addWidget(self.lineEdit_user, 6, 8, 1, 3)
        self.checkBox_user = QtWidgets.QCheckBox(self.tab_10)
        self.checkBox_user.setObjectName("checkBox_user")
        self.gridLayout_9.addWidget(self.checkBox_user, 8, 3, 1, 1)
        self.lineEdit_user_F = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_user_F.sizePolicy().hasHeightForWidth())
        self.lineEdit_user_F.setSizePolicy(sizePolicy)
        self.lineEdit_user_F.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_user_F.setObjectName("lineEdit_user_F")
        self.gridLayout_9.addWidget(self.lineEdit_user_F, 9, 9, 1, 2)
        self.label_35 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_35.sizePolicy().hasHeightForWidth())
        self.label_35.setSizePolicy(sizePolicy)
        self.label_35.setFrameShape(QtWidgets.QFrame.Box)
        self.label_35.setAlignment(QtCore.Qt.AlignCenter)
        self.label_35.setObjectName("label_35")
        self.gridLayout_9.addWidget(self.label_35, 9, 4, 1, 1)
        self.label_34 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_34.sizePolicy().hasHeightForWidth())
        self.label_34.setSizePolicy(sizePolicy)
        self.label_34.setFrameShape(QtWidgets.QFrame.Box)
        self.label_34.setAlignment(QtCore.Qt.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.gridLayout_9.addWidget(self.label_34, 7, 10, 1, 1)
        self.label_sin = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_sin.sizePolicy().hasHeightForWidth())
        self.label_sin.setSizePolicy(sizePolicy)
        self.label_sin.setFrameShape(QtWidgets.QFrame.Box)
        self.label_sin.setAlignment(QtCore.Qt.AlignCenter)
        self.label_sin.setObjectName("label_sin")
        self.gridLayout_9.addWidget(self.label_sin, 4, 1, 1, 1)
        self.lineEdit_FF = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_FF.sizePolicy().hasHeightForWidth())
        self.lineEdit_FF.setSizePolicy(sizePolicy)
        self.lineEdit_FF.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_FF.setObjectName("lineEdit_FF")
        self.gridLayout_9.addWidget(self.lineEdit_FF, 8, 6, 1, 1)
        self.lineEdit_DF = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_DF.sizePolicy().hasHeightForWidth())
        self.lineEdit_DF.setSizePolicy(sizePolicy)
        self.lineEdit_DF.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_DF.setObjectName("lineEdit_DF")
        self.gridLayout_9.addWidget(self.lineEdit_DF, 8, 9, 1, 1)
        self.label_26 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_26.sizePolicy().hasHeightForWidth())
        self.label_26.setSizePolicy(sizePolicy)
        self.label_26.setFrameShape(QtWidgets.QFrame.Box)
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.gridLayout_9.addWidget(self.label_26, 4, 6, 1, 1)
        self.label_Random = QtWidgets.QLabel(self.tab_10)
        self.label_Random.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Random.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Random.setObjectName("label_Random")
        self.gridLayout_9.addWidget(self.label_Random, 5, 1, 1, 1)
        self.checkBox_sin = QtWidgets.QCheckBox(self.tab_10)
        self.checkBox_sin.setObjectName("checkBox_sin")
        self.gridLayout_9.addWidget(self.checkBox_sin, 4, 3, 1, 1)
        self.label_28 = QtWidgets.QLabel(self.tab_10)
        self.label_28.setFrameShape(QtWidgets.QFrame.Box)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.gridLayout_9.addWidget(self.label_28, 4, 9, 1, 1)
        self.checkBox_since_A = QtWidgets.QCheckBox(self.tab_10)
        self.checkBox_since_A.setObjectName("checkBox_since_A")
        self.gridLayout_9.addWidget(self.checkBox_since_A, 7, 3, 1, 1)
        self.label_31 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_31.sizePolicy().hasHeightForWidth())
        self.label_31.setSizePolicy(sizePolicy)
        self.label_31.setFrameShape(QtWidgets.QFrame.Box)
        self.label_31.setAlignment(QtCore.Qt.AlignCenter)
        self.label_31.setObjectName("label_31")
        self.gridLayout_9.addWidget(self.label_31, 7, 4, 1, 1)
        self.label_MotorID = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_MotorID.sizePolicy().hasHeightForWidth())
        self.label_MotorID.setSizePolicy(sizePolicy)
        self.label_MotorID.setAlignment(QtCore.Qt.AlignCenter)
        self.label_MotorID.setObjectName("label_MotorID")
        self.gridLayout_9.addWidget(self.label_MotorID, 4, 0, 1, 1)
        self.lineEdit_BF = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_BF.sizePolicy().hasHeightForWidth())
        self.lineEdit_BF.setSizePolicy(sizePolicy)
        self.lineEdit_BF.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_BF.setObjectName("lineEdit_BF")
        self.gridLayout_9.addWidget(self.lineEdit_BF, 8, 10, 1, 1)
        self.lineEdit_B = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_B.sizePolicy().hasHeightForWidth())
        self.lineEdit_B.setSizePolicy(sizePolicy)
        self.lineEdit_B.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_B.setObjectName("lineEdit_B")
        self.gridLayout_9.addWidget(self.lineEdit_B, 5, 10, 1, 1)
        self.label_Sine_A = QtWidgets.QLabel(self.tab_10)
        self.label_Sine_A.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Sine_A.setObjectName("label_Sine_A")
        self.gridLayout_9.addWidget(self.label_Sine_A, 7, 1, 1, 1)
        self.lineEdit_A = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_A.sizePolicy().hasHeightForWidth())
        self.lineEdit_A.setSizePolicy(sizePolicy)
        self.lineEdit_A.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_A.setObjectName("lineEdit_A")
        self.gridLayout_9.addWidget(self.lineEdit_A, 5, 4, 1, 1)
        self.checkBox_Sine_F = QtWidgets.QCheckBox(self.tab_10)
        self.checkBox_Sine_F.setObjectName("checkBox_Sine_F")
        self.gridLayout_9.addWidget(self.checkBox_Sine_F, 6, 3, 1, 1)
        self.checkBox_Random = QtWidgets.QCheckBox(self.tab_10)
        self.checkBox_Random.setObjectName("checkBox_Random")
        self.gridLayout_9.addWidget(self.checkBox_Random, 5, 3, 1, 1)
        self.label_29 = QtWidgets.QLabel(self.tab_10)
        self.label_29.setFrameShape(QtWidgets.QFrame.Box)
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.gridLayout_9.addWidget(self.label_29, 4, 10, 1, 1)
        self.lineEdit_D = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_D.sizePolicy().hasHeightForWidth())
        self.lineEdit_D.setSizePolicy(sizePolicy)
        self.lineEdit_D.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_D.setObjectName("lineEdit_D")
        self.gridLayout_9.addWidget(self.lineEdit_D, 5, 9, 1, 1)
        self.label_Sine_F = QtWidgets.QLabel(self.tab_10)
        self.label_Sine_F.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Sine_F.setObjectName("label_Sine_F")
        self.gridLayout_9.addWidget(self.label_Sine_F, 6, 1, 1, 1)
        self.label_32 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_32.sizePolicy().hasHeightForWidth())
        self.label_32.setSizePolicy(sizePolicy)
        self.label_32.setFrameShape(QtWidgets.QFrame.Box)
        self.label_32.setAlignment(QtCore.Qt.AlignCenter)
        self.label_32.setObjectName("label_32")
        self.gridLayout_9.addWidget(self.label_32, 7, 6, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_9.addItem(spacerItem2, 9, 6, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_9.addItem(spacerItem3, 6, 6, 1, 1)
        self.label_signal = QtWidgets.QLabel(self.tab_10)
        self.label_signal.setAlignment(QtCore.Qt.AlignCenter)
        self.label_signal.setObjectName("label_signal")
        self.gridLayout_9.addWidget(self.label_signal, 0, 4, 1, 1)
        self.label_33 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_33.sizePolicy().hasHeightForWidth())
        self.label_33.setSizePolicy(sizePolicy)
        self.label_33.setFrameShape(QtWidgets.QFrame.Box)
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.gridLayout_9.addWidget(self.label_33, 7, 9, 1, 1)
        self.lineEdit_F = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_F.sizePolicy().hasHeightForWidth())
        self.lineEdit_F.setSizePolicy(sizePolicy)
        self.lineEdit_F.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_F.setObjectName("lineEdit_F")
        self.gridLayout_9.addWidget(self.lineEdit_F, 5, 6, 1, 1)
        self.label_27 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        self.label_27.setFrameShape(QtWidgets.QFrame.Box)
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.gridLayout_9.addWidget(self.label_27, 4, 4, 1, 1)
        self.checkBox_Adaptive = QtWidgets.QCheckBox(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_Adaptive.sizePolicy().hasHeightForWidth())
        self.checkBox_Adaptive.setSizePolicy(sizePolicy)
        self.checkBox_Adaptive.setStyleSheet("background-color: rgb(106, 106, 106);")
        self.checkBox_Adaptive.setObjectName("Run")
        self.gridLayout_9.addWidget(self.checkBox_Adaptive, 5, 0, 1, 1)
        self.label_Ratio = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_Ratio.sizePolicy().hasHeightForWidth())
        self.label_Ratio.setSizePolicy(sizePolicy)
        self.label_Ratio.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Ratio.setObjectName("label_Ratio")
        self.gridLayout_9.addWidget(self.label_Ratio, 6, 0, 1, 1)
        self.lineEdit_Ratio = QtWidgets.QLineEdit(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_Ratio.sizePolicy().hasHeightForWidth())
        self.lineEdit_Ratio.setSizePolicy(sizePolicy)
        self.lineEdit_Ratio.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lineEdit_Ratio.setObjectName("lineEdit_Ratio")
        self.gridLayout_9.addWidget(self.lineEdit_Ratio, 7, 0, 1, 1)
        self.Widget_Panel.addTab(self.tab_10, "")
        self.tab_11 = QtWidgets.QWidget()
        self.tab_11.setObjectName("tab_11")
        self.formLayout = QtWidgets.QFormLayout(self.tab_11)
        self.formLayout.setObjectName("formLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.formLayout.setLayout(2, QtWidgets.QFormLayout.LabelRole, self.horizontalLayout_2)
        self.pushButton = QtWidgets.QPushButton(self.tab_11)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.pushButton)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.formLayout.setItem(0, QtWidgets.QFormLayout.FieldRole, spacerItem4)
        self.Widget_Panel.addTab(self.tab_11, "")
        self.horizontalLayout.addWidget(self.Widget_Panel)
        self.Widget_Emergency = QtWidgets.QTabWidget(self.frame_3)
        self.Widget_Emergency.setStyleSheet("background-color: rgb(185, 185, 185);")
        self.Widget_Emergency.setObjectName("Widget_Emergency")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.tab_4)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.lcdNumber_Frame = QtWidgets.QLCDNumber(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_Frame.sizePolicy().hasHeightForWidth())
        self.lcdNumber_Frame.setSizePolicy(sizePolicy)
        self.lcdNumber_Frame.setObjectName("lcdNumber_Frame")
        self.gridLayout_11.addWidget(self.lcdNumber_Frame, 0, 1, 1, 1)
        self.pushButton_Emergency = QtWidgets.QPushButton(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Emergency.sizePolicy().hasHeightForWidth())
        self.pushButton_Emergency.setSizePolicy(sizePolicy)
        self.pushButton_Emergency.setStyleSheet("background-color: rgb(255, 10, 26);\n"
                                                "font: 24pt \"Adobe Arabic\";")
        self.pushButton_Emergency.setObjectName("pushButton_Emergency")
        self.gridLayout_11.addWidget(self.pushButton_Emergency, 1, 0, 1, 2)
        spacerItem5 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_11.addItem(spacerItem5, 2, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setStyleSheet("")
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setLineWidth(1)
        self.label.setObjectName("label")
        self.gridLayout_11.addWidget(self.label, 0, 0, 1, 1)
        self.gridLayout_11.setRowStretch(0, 1)
        self.Widget_Emergency.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.tab_5)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_8 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout_12.addWidget(self.label_8, 0, 0, 1, 1)
        self.label_position_Motor2 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_position_Motor2.sizePolicy().hasHeightForWidth())
        self.label_position_Motor2.setSizePolicy(sizePolicy)
        self.label_position_Motor2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_position_Motor2.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_position_Motor2.setObjectName("label_position_Motor2")
        self.gridLayout_12.addWidget(self.label_position_Motor2, 1, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.gridLayout_12.addWidget(self.label_9, 1, 0, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.gridLayout_12.addWidget(self.label_11, 0, 2, 1, 1)
        self.label_distance_Motor1 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_distance_Motor1.sizePolicy().hasHeightForWidth())
        self.label_distance_Motor1.setSizePolicy(sizePolicy)
        self.label_distance_Motor1.setFrameShape(QtWidgets.QFrame.Box)
        self.label_distance_Motor1.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_distance_Motor1.setObjectName("label_distance_Motor1")
        self.gridLayout_12.addWidget(self.label_distance_Motor1, 0, 3, 1, 1)
        self.label_position_Motor1 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_position_Motor1.sizePolicy().hasHeightForWidth())
        self.label_position_Motor1.setSizePolicy(sizePolicy)
        self.label_position_Motor1.setFrameShape(QtWidgets.QFrame.Box)
        self.label_position_Motor1.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_position_Motor1.setObjectName("label_position_Motor1")
        self.gridLayout_12.addWidget(self.label_position_Motor1, 0, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.gridLayout_12.addWidget(self.label_12, 1, 2, 1, 1)
        self.label_distance_Motor2 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_distance_Motor2.sizePolicy().hasHeightForWidth())
        self.label_distance_Motor2.setSizePolicy(sizePolicy)
        self.label_distance_Motor2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_distance_Motor2.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_distance_Motor2.setObjectName("label_distance_Motor2")
        self.gridLayout_12.addWidget(self.label_distance_Motor2, 1, 3, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.gridLayout_12.addWidget(self.label_10, 2, 0, 1, 1)
        self.label_position_Motor3 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_position_Motor3.sizePolicy().hasHeightForWidth())
        self.label_position_Motor3.setSizePolicy(sizePolicy)
        self.label_position_Motor3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_position_Motor3.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_position_Motor3.setObjectName("label_position_Motor3")
        self.gridLayout_12.addWidget(self.label_position_Motor3, 2, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout_12.addWidget(self.label_13, 2, 2, 1, 1)
        self.label_distance_Motor3 = QtWidgets.QLabel(self.tab_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_distance_Motor3.sizePolicy().hasHeightForWidth())
        self.label_distance_Motor3.setSizePolicy(sizePolicy)
        self.label_distance_Motor3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_distance_Motor3.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_distance_Motor3.setObjectName("label_distance_Motor3")
        self.gridLayout_12.addWidget(self.label_distance_Motor3, 2, 3, 1, 1)
        self.Widget_Emergency.addTab(self.tab_5, "")
        self.horizontalLayout.addWidget(self.Widget_Emergency)
        self.horizontalLayout.setStretch(0, 4)
        self.horizontalLayout.setStretch(1, 2)
        self.gridLayout_6.addWidget(self.frame_3, 0, 0, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_6)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout_3.setStretch(1, 1)
        self.gridLayout_2.addWidget(self.frame_2, 0, 0, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 1, 1, 1, 1)
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_image2 = QtWidgets.QLabel(self.frame)
        self.label_image2.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_image2.setText("")
        self.label_image2.setObjectName("label_image2")
        self.gridLayout_3.addWidget(self.label_image2, 1, 0, 1, 1)
        self.label_image1 = QtWidgets.QLabel(self.frame)
        self.label_image1.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_image1.setText("")
        self.label_image1.setObjectName("label_image1")
        self.gridLayout_3.addWidget(self.label_image1, 0, 0, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_3)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_information = QtWidgets.QLabel(self.frame)
        self.label_information.setTextFormat(QtCore.Qt.RichText)
        self.label_information.setObjectName("label_information")
        self.gridLayout_4.addWidget(self.label_information, 1, 0, 1, 1)
        self.Widget_Ser_select = QtWidgets.QTabWidget(self.frame)
        self.Widget_Ser_select.setObjectName("Widget_Ser_select")
        self.tab_13 = QtWidgets.QWidget()
        self.tab_13.setObjectName("tab_13")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.tab_13)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.spinBox_Motor1_select = QtWidgets.QSpinBox(self.tab_13)
        self.spinBox_Motor1_select.setObjectName("spinBox_Motor1_select")
        self.gridLayout_13.addWidget(self.spinBox_Motor1_select, 1, 1, 1, 1)
        self.label_Motor2 = QtWidgets.QLabel(self.tab_13)
        self.label_Motor2.setAcceptDrops(False)
        self.label_Motor2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Motor2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_Motor2.setLineWidth(1)
        self.label_Motor2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Motor2.setObjectName("label_Motor2")
        self.gridLayout_13.addWidget(self.label_Motor2, 2, 0, 1, 1)
        self.label_Motor1_2 = QtWidgets.QLabel(self.tab_13)
        self.label_Motor1_2.setAcceptDrops(False)
        self.label_Motor1_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Motor1_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_Motor1_2.setLineWidth(1)
        self.label_Motor1_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Motor1_2.setObjectName("label_Motor1_2")
        self.gridLayout_13.addWidget(self.label_Motor1_2, 0, 0, 1, 1)
        self.checkBox_Motor3 = QtWidgets.QCheckBox(self.tab_13)
        self.checkBox_Motor3.setObjectName("checkBox_Motor3")
        self.gridLayout_13.addWidget(self.checkBox_Motor3, 3, 2, 1, 1)
        self.checkBox_Motor2 = QtWidgets.QCheckBox(self.tab_13)
        self.checkBox_Motor2.setObjectName("checkBox_Motor2")
        self.gridLayout_13.addWidget(self.checkBox_Motor2, 2, 2, 1, 1)
        self.label_Motor3 = QtWidgets.QLabel(self.tab_13)
        self.label_Motor3.setAcceptDrops(False)
        self.label_Motor3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Motor3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_Motor3.setLineWidth(1)
        self.label_Motor3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Motor3.setObjectName("label_Motor3")
        self.gridLayout_13.addWidget(self.label_Motor3, 3, 0, 1, 1)
        self.spinBox_Motor3_select = QtWidgets.QSpinBox(self.tab_13)
        self.spinBox_Motor3_select.setObjectName("spinBox_Motor3_select")
        self.gridLayout_13.addWidget(self.spinBox_Motor3_select, 3, 1, 1, 1)
        self.label_Motor1 = QtWidgets.QLabel(self.tab_13)
        self.label_Motor1.setAcceptDrops(False)
        self.label_Motor1.setFrameShape(QtWidgets.QFrame.Box)
        self.label_Motor1.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_Motor1.setLineWidth(1)
        self.label_Motor1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Motor1.setObjectName("label_Motor1")
        self.gridLayout_13.addWidget(self.label_Motor1, 1, 0, 1, 1)
        self.spinBox_Motor2_select = QtWidgets.QSpinBox(self.tab_13)
        self.spinBox_Motor2_select.setObjectName("spinBox_Motor2_select")
        self.gridLayout_13.addWidget(self.spinBox_Motor2_select, 2, 1, 1, 1)
        self.spinBox_Camera_select = QtWidgets.QSpinBox(self.tab_13)
        self.spinBox_Camera_select.setObjectName("spinBox_Camera_select")
        self.gridLayout_13.addWidget(self.spinBox_Camera_select, 0, 1, 1, 1)
        self.checkBox_Motor1 = QtWidgets.QCheckBox(self.tab_13)
        self.checkBox_Motor1.setObjectName("checkBox_Motor1")
        self.gridLayout_13.addWidget(self.checkBox_Motor1, 1, 2, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.tab_13)
        self.comboBox.setObjectName("comboBox")
        self.gridLayout_13.addWidget(self.comboBox, 1, 3, 1, 1)
        self.pushButton_camera = QtWidgets.QPushButton(self.tab_13)
        self.pushButton_camera.setObjectName("pushButton_camera")
        self.gridLayout_13.addWidget(self.pushButton_camera, 0, 2, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(self.tab_13)
        self.comboBox_2.setObjectName("comboBox_2")
        self.gridLayout_13.addWidget(self.comboBox_2, 2, 3, 1, 1)
        self.comboBox_3 = QtWidgets.QComboBox(self.tab_13)
        self.comboBox_3.setObjectName("comboBox_3")
        self.gridLayout_13.addWidget(self.comboBox_3, 3, 3, 1, 1)
        self.Widget_Ser_select.addTab(self.tab_13, "")
        self.tab_14 = QtWidgets.QWidget()
        self.tab_14.setObjectName("tab_14")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.tab_14)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.lcdNumber_Light = QtWidgets.QLCDNumber(self.tab_14)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_Light.sizePolicy().hasHeightForWidth())
        self.lcdNumber_Light.setSizePolicy(sizePolicy)
        self.lcdNumber_Light.setObjectName("lcdNumber_Light")
        self.gridLayout_15.addWidget(self.lcdNumber_Light, 0, 2, 1, 1)
        self.checkBox_Light = QtWidgets.QCheckBox(self.tab_14)
        self.checkBox_Light.setObjectName("checkBox_Light")
        self.gridLayout_15.addWidget(self.checkBox_Light, 0, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_15.addItem(spacerItem6, 1, 2, 1, 1)
        self.verticalSlider_Light = QtWidgets.QSlider(self.tab_14)
        self.verticalSlider_Light.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_Light.setObjectName("verticalSlider_Light")
        self.gridLayout_15.addWidget(self.verticalSlider_Light, 0, 1, 2, 1)
        self.Widget_Ser_select.addTab(self.tab_14, "")
        self.gridLayout_4.addWidget(self.Widget_Ser_select, 0, 0, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_4)
        self.verticalLayout_2.setStretch(0, 6)
        self.verticalLayout_2.setStretch(1, 3)
        self.gridLayout_5.addWidget(self.frame, 0, 0, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_5, 0, 0, 2, 1)
        self.gridLayout.setRowMinimumHeight(0, 1)
        self.gridLayout.setRowMinimumHeight(1, 1)
        self.gridLayout.setColumnStretch(0, 1)
        self.gridLayout.setColumnStretch(1, 3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 22))
        self.menubar.setObjectName("menubar")
        self.menusetting = QtWidgets.QMenu(self.menubar)
        self.menusetting.setObjectName("menusetting")
        self.menuedition = QtWidgets.QMenu(self.menubar)
        self.menuedition.setObjectName("menuedition")
        self.menutools = QtWidgets.QMenu(self.menubar)
        self.menutools.setObjectName("menutools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionCOM_setting = QtWidgets.QAction(MainWindow)
        self.actionCOM_setting.setObjectName("actionCOM_setting")
        self.menusetting.addAction(self.actionCOM_setting)
        self.menubar.addAction(self.menusetting.menuAction())
        self.menubar.addAction(self.menutools.menuAction())
        self.menubar.addAction(self.menuedition.menuAction())

        self.retranslateUi(MainWindow)
        self.Widget_Panel.setCurrentIndex(0)
        self.Widget_Emergency.setCurrentIndex(1)
        self.Widget_Ser_select.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_Home.setText(_translate("MainWindow", "Home"))
        self.pushButton_Enable.setText(_translate("MainWindow", "Enable"))
        self.Widget_Panel.setTabText(self.Widget_Panel.indexOf(self.tab_7), _translate("MainWindow", "Init"))
        self.Widget_Panel.setTabText(self.Widget_Panel.indexOf(self.tab_8),
                                     _translate("MainWindow", "image processing"))
        self.label_Joint_Motor3.setText(_translate("MainWindow", "Motor3"))
        self.lineEdit_Motor1.setText(_translate("MainWindow", "0.1"))
        self.label_Joint_Motor2.setText(_translate("MainWindow", "Motor2"))
        self.pushButton_Motor3_Add.setText(_translate("MainWindow", "Add"))
        self.lineEdit_Motor3.setText(_translate("MainWindow", "0.1"))
        self.label_Joint_Motor1.setText(_translate("MainWindow", "Motor1"))
        self.lineEdit_Motor2.setText(_translate("MainWindow", "0.1"))
        self.pushButton_Motor1_Add.setText(_translate("MainWindow", "Add"))
        self.pushButton_Motor2_Add.setText(_translate("MainWindow", "Add"))
        self.pushButton_Motor1_Reduce.setText(_translate("MainWindow", "Reduce"))
        self.pushButton_Motor2_Reduce.setText(_translate("MainWindow", "Reduce"))
        self.pushButton_Motor3_Reduce.setText(_translate("MainWindow", "Reduce"))
        self.Widget_Panel.setTabText(self.Widget_Panel.indexOf(self.tab_9), _translate("MainWindow", "Joint"))
        self.lineEdit_AF.setText(_translate("MainWindow", "0"))
        self.label_30.setText(_translate("MainWindow", "user defined"))
        self.label_user.setText(_translate("MainWindow", "User defined"))
        self.lineEdit_user.setText(_translate("MainWindow", "sin(10*u)+0.5sin(5*u)+2"))
        self.checkBox_user.setText(_translate("MainWindow", "ON/OFF"))
        self.lineEdit_user_F.setText(_translate("MainWindow", "sin(10*u)+0.5sin(5*u)+2"))
        self.label_35.setText(_translate("MainWindow", "user defined"))
        self.label_34.setText(_translate("MainWindow", "Bias"))
        self.label_sin.setText(_translate("MainWindow", "sin(x)"))
        self.lineEdit_FF.setText(_translate("MainWindow", "0"))
        self.lineEdit_DF.setText(_translate("MainWindow", "0"))
        self.label_26.setText(_translate("MainWindow", "Frequency"))
        self.label_Random.setText(_translate("MainWindow", "Random"))
        self.checkBox_sin.setText(_translate("MainWindow", "ON/OFF"))
        self.label_28.setText(_translate("MainWindow", "Dalay ms"))
        self.checkBox_since_A.setText(_translate("MainWindow", "ON/OFF"))
        self.label_31.setText(_translate("MainWindow", "Amplitude F"))
        self.label_MotorID.setText(_translate("MainWindow", "Motor ID"))
        self.lineEdit_BF.setText(_translate("MainWindow", "0"))
        self.lineEdit_B.setText(_translate("MainWindow", "0"))
        self.label_Sine_A.setText(_translate("MainWindow", "Sine A sweep"))
        self.lineEdit_A.setText(_translate("MainWindow", "0.3"))
        self.checkBox_Sine_F.setText(_translate("MainWindow", "ON/OFF"))
        self.checkBox_Random.setText(_translate("MainWindow", "ON/OFF"))
        self.label_29.setText(_translate("MainWindow", "Bias"))
        self.lineEdit_D.setText(_translate("MainWindow", "0"))
        self.label_Sine_F.setText(_translate("MainWindow", "Sine F sweep"))
        self.label_32.setText(_translate("MainWindow", "Frequency F"))
        self.label_signal.setText(_translate("MainWindow", "Signal"))
        self.label_33.setText(_translate("MainWindow", "Dalay ms"))
        self.lineEdit_F.setText(_translate("MainWindow", "1"))
        self.label_27.setText(_translate("MainWindow", "Amplitude"))
        self.checkBox_Adaptive.setText(_translate("MainWindow", "Strat"))
        self.label_Ratio.setText(_translate("MainWindow", "Ratio"))
        self.lineEdit_Ratio.setText(_translate("MainWindow", "0.1"))
        self.Widget_Panel.setTabText(self.Widget_Panel.indexOf(self.tab_10),
                                     _translate("MainWindow", "Adaptive  Control"))
        self.pushButton.setText(_translate("MainWindow", "Save File"))
        self.Widget_Panel.setTabText(self.Widget_Panel.indexOf(self.tab_11), _translate("MainWindow", "Data Save"))
        self.pushButton_Emergency.setText(_translate("MainWindow", "Emergency stop"))
        self.label.setText(_translate("MainWindow",
                                      "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Image Frames</span></p></body></html>"))
        self.Widget_Emergency.setTabText(self.Widget_Emergency.indexOf(self.tab_4),
                                         _translate("MainWindow", "Emergency"))
        self.label_8.setText(_translate("MainWindow", "Motor1:"))
        self.label_position_Motor2.setText(_translate("MainWindow", "0"))
        self.label_9.setText(_translate("MainWindow", "Motor2:"))
        self.label_11.setText(_translate("MainWindow", "distance"))
        self.label_distance_Motor1.setText(_translate("MainWindow", "0"))
        self.label_position_Motor1.setText(_translate("MainWindow", "0"))
        self.label_12.setText(_translate("MainWindow", "distance"))
        self.label_distance_Motor2.setText(_translate("MainWindow", "0"))
        self.label_10.setText(_translate("MainWindow", "Motor3:"))
        self.label_position_Motor3.setText(_translate("MainWindow", "0"))
        self.label_13.setText(_translate("MainWindow", "distance"))
        self.label_distance_Motor3.setText(_translate("MainWindow", "0"))
        self.Widget_Emergency.setTabText(self.Widget_Emergency.indexOf(self.tab_5),
                                         _translate("MainWindow", "Motor Position"))
        self.label_information.setText(_translate("MainWindow", "hello!"))
        self.label_Motor2.setText(_translate("MainWindow", "Motor2"))
        self.label_Motor1_2.setText(_translate("MainWindow", "Camera"))
        self.checkBox_Motor3.setText(_translate("MainWindow", "Enable"))
        self.checkBox_Motor2.setText(_translate("MainWindow", "Enable"))
        self.label_Motor3.setText(_translate("MainWindow", "Motor3"))
        self.label_Motor1.setText(_translate("MainWindow", "Motor1"))
        self.checkBox_Motor1.setText(_translate("MainWindow", "Enable"))
        self.pushButton_camera.setText(_translate("MainWindow", "Open"))
        self.Widget_Ser_select.setTabText(self.Widget_Ser_select.indexOf(self.tab_13),
                                          _translate("MainWindow", "COM Select"))
        self.checkBox_Light.setText(_translate("MainWindow", "OPEN/OFF"))
        self.Widget_Ser_select.setTabText(self.Widget_Ser_select.indexOf(self.tab_14),
                                          _translate("MainWindow", "Light"))
        self.menusetting.setTitle(_translate("MainWindow", "setting"))
        self.menuedition.setTitle(_translate("MainWindow", "edition"))
        self.menutools.setTitle(_translate("MainWindow", "tools"))
        self.actionCOM_setting.setText(_translate("MainWindow", "COM setting"))

    def ReadCamera(self):
        # self.CameraNum = self.spinBox_Camera_select.text()
        self.Camera.Camera_ID=self.spinBox_Camera_select.text()
        # print("相机编号为"+self.CameraNum)
        self.label_information.setText("camera ID :" + self.Camera.Camera_ID)
        pass

    def OpenCamera(self):
        if self.flag == 0:
            # self.cap_video = cv2.VideoCapture(int(self.Camera.Camera_ID),cv2.CAP_DSHOW)  # 可注释 (# cv2.CAP_DSHOW)
            # self.timer.start(50)
            # self.timer2.start(50)
            # 打开相机
            self.Camera.Open_Camera()
            # 触发信号
            self.Camera.Signal_Camera.connect(self.show_viedo)
            # 开启进程
            self.Camera.start()
            self.flag = 1
            self.pushButton_camera.setText("Close")
            self.label_information.setText("camera open success!")
        else:
            # 关闭相机进程
            # self.cap_video.release()
            self.Camera.Close_Camera()
            self.Camera.exec()
            # self.timer.stop()
            # self.timer2.stop()

            self.label_image1.clear()
            self.label_image2.clear()
            self.pushButton_camera.setText("Open")
            self.flag = 0
            self.label_information.setText("close success!")
        pass

    ## show the image of camera
    def show_viedo(self,msg):
        # print(msg)
        # ret, self.img = self.cap_video.read()
        ret, self.img = self.Camera.cap_video.read()
        if ret:
            self.show_cv_img(self.img)
            self.image_processing(self.img)
        else:
            self.label_information.setText("Failed to open the camera, please check the connection")
            self.pushButton_camera.setText("Open")

    def show_cv_img(self, img):
        shrink = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        QtImg = QtGui.QImage(shrink.data,
                             shrink.shape[1],
                             shrink.shape[0],
                             shrink.shape[1] * 3,
                             QtGui.QImage.Format_RGB888)
        jpg_out = QtGui.QPixmap(QtImg).scaled(
            self.label_image1.width(), self.label_image1.height())

        self.label_image1.setPixmap(jpg_out)

    ## 图像处理算法
    def image_processing(self, img):
        # img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        img_processed,self.Camera.cx,self.Camera.cy = FindTarget(img)
        shrink = cv2.cvtColor(img_processed, cv2.COLOR_BGR2RGB)
        QtImg = QtGui.QImage(shrink.data,
                             shrink.shape[1],
                             shrink.shape[0],
                             shrink.shape[1] * 3,
                             QtGui.QImage.Format_RGB888)
        jpg_out = QtGui.QPixmap(QtImg).scaled(
            self.label_image2.width(), self.label_image2.height())

        self.label_image2.setPixmap(jpg_out)

    def Read_Motor1(self):
        self.motor1 = "COM" + self.spinBox_Motor1_select.text()
        self.ser_motor1.port = self.motor1
        self.label_information.setText("Motor1 COM-ID:" + self.motor1)
        pass

    def Read_Motor2(self):
        self.motor2 = "COM" + self.spinBox_Motor2_select.text()
        self.ser_motor2.port = self.motor2
        self.label_information.setText("Motor2 COM-ID:" + self.motor2)
        pass

    def Read_Motor3(self):
        self.motor3 = "COM" + self.spinBox_Motor3_select.text()
        self.ser_motor3.port = self.motor3
        self.label_information.setText("Motor3 COM-ID:" + self.motor3)
        pass

    def EnableMotor1(self, state):
        if state == QtCore.Qt.Unchecked:
            self.flag_motor1 = 0
            self.ser_motor1.close_port()
            self.label_information.setText("Motor1 not enable !")
        elif state == QtCore.Qt.Checked:
            self.flag_motor1 = 1
            self.ser_motor1.enable_port()
            # 电机1初始化
            # self.ser_motor1.send = '1OR\r'
            self.ser_motor1.senddata('1OR\r')
            self.label_information.setText("Motor1 enable success !")
            # the function #

    def EnableMotor2(self, state):
        if state == QtCore.Qt.Unchecked:
            self.flag_motor2 = 0

            self.ser_motor2.close_port()
            self.label_information.setText("Motor2 not enable !")
        elif state == QtCore.Qt.Checked:
            self.flag_motor2 = 1
            self.ser_motor2.enable_port()
            # 电机2初始化
            # self.ser_motor2.send = '\0\r'
            self.ser_motor2.senddata('\0\r')
            self.label_information.setText("Motor2 enable success !")
            # the function #

    def EnableMotor3(self, state):
        if state == QtCore.Qt.Unchecked:
            self.flag_motor3 = 0
            self.ser_motor3.close_port()
            self.label_information.setText("Motor3 not enable !")
        elif state == QtCore.Qt.Checked:
            self.flag_motor3 = 1
            self.ser_motor3.enable_port()
            self.label_information.setText("Motor3 enable success !")
            # the function #

    # 电机增量运动
    def motor1_PR(self):
        ser_motor1_send = '1PR' + str(self.step_motor1) + '\r'
        self.ser_motor1.senddata(ser_motor1_send)
        self.label_information.setText("Motor1 move: -" + str(self.step_motor1))

    def motor1_PR_reverse(self):
        ser_motor1_send = '1PR-' + str(self.step_motor1) + '\r'
        self.ser_motor1.senddata(ser_motor1_send)
        self.label_information.setText("Motor1 move: -" + str(self.step_motor1))

    def motor2_PR(self):
        temp = 'MOVEINC ' + str(self.step_motor2) + ' 2'
        ser_motor2_send = temp + '<' + self.checksum(temp) + '>\r'
        self.ser_motor2.senddata(ser_motor2_send)
        self.label_information.setText("Motor2 move:" + str(self.step_motor2))

    def motor2_PR_reverse(self):
        temp = 'MOVEINC -' + str(self.step_motor2) + ' 2'
        ser_motor2_send = temp + '<' + self.checksum(temp) + '>\r'
        self.ser_motor2.senddata(ser_motor2_send)
        self.label_information.setText("Motor2 move:-" + str(self.step_motor2))

    def EnableLight(self, state):
        if state == QtCore.Qt.Unchecked:
            self.label_information.setText("Light not enable !")
        elif state == QtCore.Qt.Checked:
            self.label_information.setText("Light enable success !")

    def LightChange(self):
        self.light = self.verticalSlider_Light.value()
        self.label_information.setText("Light :" + str(self.light))
        self.lcdNumber_Light.display(self.light)
        print(self.light)
        pass

    def ReadText_motor1(self):
        self.step_motor1 = self.lineEdit_Motor1.text()
        self.label_information.setText("Motor1 step :" + str(self.step_motor1))

    def ReadText_motor2(self):
        self.step_motor2 = self.lineEdit_Motor2.text()
        self.label_information.setText("Motor1 step :" + str(self.step_motor2))

    def ReadText_motor3(self):
        self.step_motor3 = self.lineEdit_Motor3.text()
        self.label_information.setText("Motor1 step :" + str(self.step_motor3))

    def position_requset(self):
        # self.ser_motor1.send = '1TP?\r'
        self.ser_motor1.senddata('1TP?\r')

        # self.ser_motor2.send = 'PFB<D8>\r'
        self.ser_motor2.senddata('PFB<D8>\r')

        self.data_motor1 = self.ser_motor1.receivedata()

        self.data_motor2 = self.ser_motor2.receivedata()
        data_motor2_temp = self.DataAnlysis(self.data_motor2, 'PFB<D8>')
        print('\n\n'+self.data_motor2+'\n'+self.data_motor2.encode().hex()+'\n'+data_motor2_temp+'\n\n')

    def plot_enable(self):
        if self.flag_motor1 and self.flag_motor2:

            # if self.flag_motor1 and self.flag_motor2 and self.flag_motor3:
            if self.flag_plot == 0:
                self.flag_plot = 1
                self.pushButton_Enable.setText("Close")
                self.label_information.setText("plot enable!")
                ## motor2 启动
                # self.ser_motor2.send = 'ACTIVE<BC>\r'
                self.ser_motor2.senddata('ACTIVE<BC>\r')
                # self.ser_motor2.send = 'en<D3>\r'
                self.ser_motor2.senddata('en<D3>\r')
                ## 数据清除
                self.graphicsView_motor1.plot(clear='clear')
                self.graphicsView_motor2.plot(clear='clear')
                self.graphicsView_x.plot(clear='clear')
                self.graphicsView_y.plot(clear='clear')
                self.motor1_plot = self.motor1_position = np.array([0])
                self.motor2_plot = self.motor2_position = np.array([0])
                # self.curve_motor1 = self.graphicsView_motor1.plot(self.motor1_plot, name="mode2", pen=pq.mkPen(color='b', width=2))
                self.curve_motor1 = self.graphicsView_motor1.plot(self.motor1_plot)
                self.curve_motor2 = self.graphicsView_motor2.plot(self.motor2_plot)
                self.curve_x = self.graphicsView_x.plot(self.img_x_plot)
                self.curve_y = self.graphicsView_y.plot(self.img_y_plot)


                ## 打开时钟信号
                self.timer_plot.start(50)
                self.timer_read.start(50)

                self.save_data = open("D:/PY_Project/python_2022_8_3/test_save.txt", "w")




            else:
                self.pushButton_Enable.setText("Enable")
                self.graphicsView_motor1.plot(clear='clear')
                self.graphicsView_motor2.plot(clear='clear')
                self.graphicsView_x.plot(clear='clear')
                self.graphicsView_y.plot(clear='clear')
                self.flag_plot = 0
                self.label_information.setText("close success!")
                # motor 关闭
                # self.ser_motor2.send = 'ACTIVE<BC>\r'
                self.ser_motor2.senddata('ACTIVE<BC>\r')
                # self.ser_motor2.send = 'k<6B>\r'
                self.ser_motor2.senddata('k<6B>\r')
                # 关闭定时器
                self.timer_plot.stop()
                self.timer_read.stop()
                # self.timer_send.stop()
                # self.count=0
                # 数据保存
                self.save_data.close()

        else:
            self.label_information.setText("check!")
        pass

    def update_data(self):
        ## motor1
        # self.data_motor1=self.ser_motor1.receivedata()
        # self.data_motor1 = self.ser_motor1.receive
        # print(self.data_motor1)
        ## motor2
        # self.data_motor2=self.ser_motor2.receivedata()
        # self.data_motor2 = self.ser_motor2.receive
        dt_ms = datetime.datetime.now().strftime('---%Y-%m-%d %H:%M:%S.%f')
        # print('\r\n'+self.data_motor2,end='\r\n')
        if self.data_motor1:
            ## 串口格式转换
            self.data_motor1 = self.data_motor1.replace('\r', '')
            self.data_motor1 = self.data_motor1.replace('1TP', '')
            # 位置显示
            self.label_distance_Motor1.setText(self.data_motor1)
            self.data_motor1 = float(self.data_motor1)

            if len(self.motor1_plot) < 150:
                self.curve_motor1.setData(self.motor1_plot)
                self.motor1_plot = np.append(self.motor1_plot, self.data_motor1)
                self.motor1_position = np.append(self.motor1_position, self.data_motor1)


            else:
                self.motor1_plot[:-1] = self.motor1_plot[1:]
                self.motor1_plot[-1] = self.data_motor1
                # 数据填充到绘制曲线中
                self.curve_motor1.setData(self.motor1_plot)
        # motor2
        if self.data_motor2:
            # 串口格式转换
            data_motor2_temp=self.DataAnlysis(self.data_motor2,'PFB<D8>')
            if data_motor2_temp:
                self.data_motor2= data_motor2_temp
                # print(self.data_motor2)
                self.save_data.write(self.data_motor2+dt_ms+'\n')
                self.label_distance_Motor2.setText(self.data_motor2)
                self.data_motor2 = float(self.data_motor2)
                #   绘制图形
                if len(self.motor2_plot) < 150:
                    self.curve_motor2.setData(self.motor2_plot)
                    self.motor2_plot = np.append(self.motor2_plot, self.data_motor2)
                    self.motor2_position = np.append(self.motor2_position, self.data_motor2)
                else:
                    self.motor2_plot[:-1] = self.motor2_plot[1:]
                    self.motor2_plot[-1] = self.data_motor2
                    # 数据填充到绘制曲线中
                    self.curve_motor２.setData(self.motor2_plot)
        # 绘制图片中心坐标
        if len(self.img_x_plot) < 150:
            self.curve_x.setData(self.img_x_plot)
            self.img_x_plot = np.append(self.img_x_plot, self.Camera.cx)

        else:
            self.img_x_plot[:-1] = self.img_x_plot[1:]
            self.img_x_plot[-1] = self.Camera.cx
            # 数据填充到绘制曲线中
            self.curve_x.setData(self.img_x_plot)
        if len(self.img_y_plot) < 150:
            self.curve_y.setData(self.img_y_plot)
            self.img_y_plot = np.append(self.img_y_plot, self.Camera.cy)

        else:
            self.img_y_plot[:-1] = self.img_y_plot[1:]
            self.img_y_plot[-1] = self.Camera.cy
            # 数据填充到绘制曲线中
            self.curve_y.setData(self.img_y_plot)

    def select_rate(self):
        chekbox = self.sender()  ##获取信号发生的对象
        if chekbox.id == 'motor1':
            self.ser_motor1.rate = int(chekbox.currentText())
            self.label_information.setText("motor1 rate : " + chekbox.currentText())
        if chekbox.id == 'motor2':
            self.ser_motor2.rate = int(chekbox.currentText())
            self.label_information.setText("motor2 rate : " + chekbox.currentText())
        if chekbox.id == 'motor3':
            self.ser_motor3.rate = int(chekbox.currentText())
            self.label_information.setText("motor3 rate : " + chekbox.currentText())
        # self.ser_motor1.rate =
    def sin_get(self):
        chekbox =self.sender()
        print(chekbox)
        if chekbox.id == 'A':
            self.sin_A=float(self.lineEdit_A.text())
            self.label_information.setText("sin-->A : " + self.lineEdit_A.text())
            # print(self.sin_A)
        if chekbox.id == 'F':
            self.sin_F = float(self.lineEdit_F.text())
            self.label_information.setText("sin-->F : " + self.lineEdit_F.text())
            # print(self.sin_F)
        if chekbox.id == 'D':
            self.sin_D = float(self.lineEdit_D.text())
            self.label_information.setText("sin-->D : " + self.lineEdit_D.text())
            # print(self.sin_D)
        if chekbox.id == 'B':
            self.sin_B = float(self.lineEdit_B.text())
            self.label_information.setText("sin-->B : " + self.lineEdit_B.text())
            # print(self.sin_B)
    def checksum(self, s):
        response_hex_list = []
        for i in range(len(s)):
            response_hex_list.append(hex(ord(s[i]))[2:])
        check_sum_str = hex(sum([int(i, 16) for i in response_hex_list]))[-2:].upper()
        return check_sum_str
    def DataAnlysis(self, data, head):
        data2 = data.split('\n')
        matched_index = -1
        i = 0
        length = len(data2)
        while i < length:
            if head+'\r' == data2[i]:
                matched_index = i
                break
            i=i+1
        if matched_index != -1:
            data3 = data2[matched_index + 1].split(' ')[0]
            return data3
        return 'error'

    def sindata(self):
        if self.count < self.wave_len:
            temp = self.wave[self.count].split('\n')[0]
            data = temp + '<' + self.checksum(temp) + '>\r\n'
            # print(data)
            self.ser_motor2.senddata(data)
            self.count = self.count + 1
        else:
            self.count=0

    def SinRun(self,state):
        if state == QtCore.Qt.Checked:
            # 发送指令
            self.timer_send.start(20)
            self.label_information.setText("sin is running---")
        elif state == QtCore.Qt.Unchecked:
            self.timer_send.stop()
            self.count = 0
            self.label_information.setText("sin is stop---")

    def SinDataSend(self,state):
        if state == QtCore.Qt.Checked:
            # 发送指令
            file_add = "D:\PY_Project\python_2022_8_3\sin_wave_cmd.txt"
            self.wave=sin_wave_cmd(file_add, self.sin_A, self.sin_F, 50, self.sin_D, self.sin_B,1)
            self.wave_len=len(self.wave)
            self.label_information.setText("sin is running")
        elif state == QtCore.Qt.Unchecked:
            self.wave=[]
            self.wave_len=0
            self.count=0
            self.label_information.setText("sin is stop")
    def UserDefine(self,state):
        if state == QtCore.Qt.Checked:
            # 发送指令
            file_add = "D:\PY_Project\python_2022_8_3\sin_wave_user_cmd.txt"
            # self.wave=sin_wave_cmd(file_add, self.sin_A, self.sin_F, 50, self.sin_D, self.sin_B,1)
            self.wave = sin_wave_user_cmd(file_add,10)
            self.wave_len = len(self.wave)
            self.label_information.setText("sin-user is running")
        elif state == QtCore.Qt.Unchecked:
            self.wave=[]
            self.wave_len=0
            self.count=0
            self.label_information.setText("sin-user is stop")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
